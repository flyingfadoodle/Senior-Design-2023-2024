# Generated by ChatGPT 4.0 on April 29, 2024.
# Modified by Alexander Torres on 4.29.24 to fix syntax errors and improve readability.
# Additional comments by Alexander Torres and ChatGPT 4.0.

"""Abstracted module for fuzzy feet picker. Generates an array of the feet on their plate, and then picks the feet.

TODO: Finish this description when there's less to do xd - Alexander T. """


import sys
import time
import math
from pydexarm import Dexarm

# Add Movement module
sys.path.insert(0, "MovementModule") #needed??

# Constan ts for FEET PICKING 
SPEED_ROBOT = 6000 #Used for both picking and placement- base robot speed
SPEED2_ROBOT = 100 #Used for both picking and placement- fine movement speed
#Use the following three X, Y, and Z coordinates to determine index [1,1] for the picker - all other feet are picked relative to this 

PICK_X = -51 #changed from -51 to 52
PICK_Y = 228 #changed from 229 to 228
PICK_Z = -88 #Actual height of coaster is 96mm, aka 88+8. 

OFFSET_Z = 8 #Offset between pick hover position and pick place position 
OFFSET_2 = 1 #Offset used when scooting forwards to pick feet

#These two variables are the constant spacing between feet, used to find pick indices relative to [1,1]. For example, index [3,1] adds 24.5 * 2 + -50 = -1 in X, for picking [3,1]. 
#FOOT_SPACING_X = 25 #using 0.5 in X to coempsate for very slight skew. Also figured out via trial and error. 
#FOOT_SPACING_Y = 22.66 # using .66 to compensate for very slight skew. this number was figured out via trial and error

#NOTE: Trying out different spacings. 
FOOT_SPACING_X = 24
FOOT_SPACING_Y = 24

# Constants for FEET PLACEMENT
PLACEMENT_RADIUS = 70 / math.sqrt(3) #Change the "70"(mm) to something else if the coaster size changes. 
TRIANGLE_ANGLE = math.radians(120) #Angle between fuzzy feet

#The following two variables are the constant X, Y, Z center for the coaster having feet placed on it. 
COASTER_X = -217
COASTER_Y = 171
HOVER_Z = -84 #Actual height of arm against coaster is 90mm. 84+6 = 90mm. 
PLACEMENT_OFFSET_Z = 6

def robotPrintLocation(dexarm): #copy pasted for debugging 
    dexarm._send_cmd("G92.1\r")
    x, y, z, e, _, _, _ = dexarm.get_current_position()
    print(x, y, z, e, "mm")

def pick_fuzzy_foot(dexarm, index_x, index_y):
    dexarm.go_home()
    target_x = PICK_X + (index_x - 1) * FOOT_SPACING_X # Use our known spacing to know where to pick
    target_y = PICK_Y + (index_y - 1) * FOOT_SPACING_Y # 
    dexarm.move_to(target_x, target_y, 0, mode="G1", feedrate=SPEED_ROBOT) #Move to desired position, with Z=0
    robotPrintLocation(dexarm)
    dexarm.move_to(target_x, target_y, PICK_Z, mode="G1", feedrate=SPEED_ROBOT) #Descend to hover height 
    dexarm.move_to(target_x, target_y, PICK_Z - OFFSET_Z, mode="G1", feedrate=SPEED2_ROBOT) #Drop down to pick, with reduced speed
    dexarm.move_to(target_x, target_y + OFFSET_2, PICK_Z - OFFSET_Z, mode="G1", feedrate=SPEED2_ROBOT/2) #Slide forwards to ensure grab - reduced speed
    dexarm.move_to(target_x, target_y + OFFSET_2, PICK_Z, mode="G1", feedrate=SPEED2_ROBOT) #Begin to raise picker - reduced speed
    dexarm.move_to(target_x, target_y + OFFSET_2, 0, mode="G1", feedrate=SPEED_ROBOT) #Ascend back to Z = 0
    print(f"Attempted pick at [{index_x}, {index_y}]") #debug

def calculate_triangle_positions():
    positions = []
    for i in range(3): #Figure out where to put the three coaster feet, using the desired (70mm) distance. 
        angle = TRIANGLE_ANGLE * i - math.pi/2
        x = COASTER_X + PLACEMENT_RADIUS * math.cos(angle)
        y = COASTER_Y + PLACEMENT_RADIUS * math.sin(angle)
        positions.append((x, y))
    return positions

def placeFuzzyFeet(dexarm, pick_indices, num_to_place):
    if not 1 <= num_to_place <= 3:
        print("Invalid number of feet to place. Please choose between 1 and 3.") #num_to_place exists only for debugging, so you can place only one foot at a time. Under normal circumstances, always feed it 3. 
        return
    positions = calculate_triangle_positions()
    for i in range(num_to_place):
        idx_x, idx_y = pick_indices[i] #Grab our desired pick positions as integers, so [2,1] get passed into two variables as idx_x = 2 and idx_y = 1
        pick_fuzzy_foot(dexarm, idx_x, idx_y) #Call the previous function to grab the fuzzy foot at the desired position. 
        placement_x, placement_y = positions[i] #Get our foot placement positions
        dexarm.move_to(placement_x, placement_y, 0, mode="G1", feedrate=SPEED_ROBOT) #Go to desired pos @ Z=0
        dexarm.move_to(placement_x, placement_y, HOVER_Z, mode="G1", feedrate=SPEED_ROBOT) #Go to hover height
        dexarm.move_to(placement_x, placement_y, HOVER_Z - PLACEMENT_OFFSET_Z, mode="G1", feedrate=SPEED2_ROBOT*2) #Go down, slightly less slowly to place 
        dexarm.move_to(placement_x, placement_y, HOVER_Z + PLACEMENT_OFFSET_Z, mode="G1", feedrate=SPEED2_ROBOT*2) #Go up, less slowly
        dexarm.move_to(placement_x, placement_y, 0, mode="G1", feedrate=SPEED_ROBOT) #Return to Z=0
        print(f"Placed fuzzy foot {i+1} at [{placement_x}, {placement_y}]") #debug

if __name__ == '__main__': #If we're running this file directly, run a test. 
    dexarm = Dexarm(port="COM4")
    dexarm.go_home()
    pick_indices = [(2, 1), (2, 2), (2, 3)]
    #pick_fuzzy_foot(dexarm, 5,1)
 #   pick_fuzzy_foot(dexarm, 4,1)
 #   pick_fuzzy_foot(dexarm, 3,1)
    placeFuzzyFeet(dexarm, pick_indices, 3)


