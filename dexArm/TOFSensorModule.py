# Generated by ChatGPT 4.0 on April 26, 2024.
# Modified by Alexander Torres on 4.29.24 to fix syntax errors and improve readability.
# Additional comments by Alexander Torres and ChatGPT 4.0.

"""
This module (TOFSensorModule.py) is designed to interface with a Time-of-Flight (ToF) 
distance sensor for precise distance measurements. It facilitates communication between 
the sensor and a controlling Python script, processing and providing sensor data that 
can be used for automated adjustments of robotic mechanisms, such as the positioning of 
a Dexarm robotic arm.

Functions:
- get_sensor_height(): Returns the calibrated height from the sensor, adjusted for specific setup offsets.
- close_sensor(): Safely closes the serial connection to the ToF sensor.

Usage:
from TOFSensorModule import get_sensor_height, close_sensor #import

get_sensor_height() #Outputs the calibrated sensor height. See calibration_offset below. 
close_sensor(): Safely closes the serial connection to the ToF sensor. #Do this at the end. If you want.

#Currently, this function is only called within PickerLoadingModule, though I may also call it in a testPick function. - AT


"""


import serial
import time

# Constants
SERIAL_PORT = 'COM24'  # Default serial port for the sensor
BAUD_RATE = 115200
TIMEOUT = 1
CALIBRATION_OFFSET = 40.0  # Calibrated height between the sensor's position and the tip of the vacuum picker, in mm
# Decrease this number to have the arm go lower when picking- as we're subtracting less from our hover height 

# Initialize serial connection
serial_connection = serial.Serial(SERIAL_PORT, baudrate=BAUD_RATE, timeout=TIMEOUT)
time.sleep(2)  # Allow time for the serial connection to establish
print("Serial connection established with TOF Sensor on", SERIAL_PORT)

def get_sensor_height():
    """Triggers the Arduino to measure the distance and returns the calibrated height."""
    # Command the Arduino to start measurement
    serial_connection.write(b"$M\n")
    raw_measurement = None

    # Wait for and process the incoming data
    while True:
        if serial_connection.in_waiting > 0:
            line = serial_connection.readline().decode().strip()
            if line.startswith("$M"):
                # Parse the average distance measurement
                raw_measurement = float(line[2:])
            elif line == "$D":
                # End of measurement data transmission
                break

    if raw_measurement is None:
        print("Measurement error or no data received.")
        return None

    # Apply the calibration offset and round the result
    calibrated_measurement = round(raw_measurement - CALIBRATION_OFFSET, 1)

    # Debug message
    print(f"Debug Info: Raw measurement = {raw_measurement} mm, "
          f"Calibrated measurement = {calibrated_measurement} mm, "
          f"Current offset = {CALIBRATION_OFFSET} mm")

    return calibrated_measurement

def close_sensor():
    """Close the serial connection."""
    serial_connection.close()
    print("Serial connection closed with TOF Sensor.")

# Optional: Test the functionality when run as a script
if __name__ == "__main__":
    height = get_sensor_height()
    if height is not None:
        print(f"Calibrated sensor height: {height} mm")
    close_sensor()


