# Generated by ChatGPT 4.0 on April 29, 2024.
# Modified by Alexander Torres on 4.29.24 to fix syntax errors and improve readability.
# Additional comments by Alexander Torres and ChatGPT 4.0.

"""
Module for applying fuzzy feet to coasters using two robotic arms.
One arm places the coaster in the application area, and the other applies the fuzzy feet.
"""

import sys
import time
from pydexarm import Dexarm
from FuzzyFeetPlacementModule import placeFuzzyFeet
from PickVerificationModule import pickStatus
from ErrorHandlingModule import stopWorkcell

# Constants for positioning
fuzzyX = 205 #In theory, I can just change this to a 200- equal in magnitude to the amount we moved to the side. 
fuzzyY_hover = 240
fuzzyY_insert = fuzzyY_hover + 80 #should equal 300 for current config. This is like this in case we move the jig forwards or backwards. 
fuzzyX_idle = 150
fuzzyZ = -88
RAIL_FUZZY_COASTER_JIG = 680 #Moved 200mm to the side as our current orientation is bad. Original was 880. 
speedRobot = 6000

def applyFuzzyFeet(dexarmPicker, dexarmAdhesive, pick_indices):
        
        """
        Syntax: applyFuzzyFeet(dexarmPicker, dexarmAdhesive, pick_indices):

    Applies fuzzy feet to a coaster using two Dexarm robotic arms.

    Parameters:
    - dexarmPicker: Dexarm instance for moving coasters.
    - dexarmAdhesive: Dexarm instance for applying adhesive objectcets (fuzzy feet).
    - pick_indices: List of indices  indicating the indices of fuzzy feet to apply.
    """
        # Move arm to hover at the fuzzy feet insert area 
        dexarmPicker.go_home() #Make sure arm is home'd correctly, prior to continuing. 

        dexarmPicker.move_to(fuzzyX, fuzzyY_hover, 0, RAIL_FUZZY_COASTER_JIG, mode="G0", feedrate=speedRobot)
        dexarmPicker.move_to(fuzzyX, fuzzyY_hover, fuzzyZ, mode="G0", feedrate=speedRobot) #Move down to the correct height to insert
        dexarmPicker.move_to(fuzzyX, fuzzyY_insert, fuzzyZ, mode="G1", feedrate=speedRobot) #Move forward to insert
        dexarmPicker.air_picker_stop()  # Release coaster inside of jig
        dexarmPicker.move_to(fuzzyX, fuzzyY_insert, fuzzyZ + 30, mode="G1", feedrate=speedRobot)  # Raise slightly prior to moving to wait position (not to be confused with idle)
        dexarmPicker.move_to(240, 50, 0, mode="G0", feedrate=speedRobot) #Move picker out of the way. 

        
        placeFuzzyFeet(dexarmAdhesive, pick_indices, 3)
       

        # Move adhesive picker arm out of the way
        dexarmAdhesive.move_to(-200, 30, 0, mode="G1", feedrate=speedRobot)

        # Pickup the coaster after fuzzy feet application
        dexarmPicker.move_to(fuzzyX, fuzzyY_insert-5, fuzzyZ + 10, mode="G0", feedrate=speedRobot) #Move to hover above pickup spot NOTE: The +10 is to compensate for the coaster being pushed inwards. 
        dexarmPicker.move_to(fuzzyX, fuzzyY_insert-5, fuzzyZ, mode="G1", feedrate=speedRobot) #Go down, slowly. 
        dexarmPicker.air_picker_pick() #Grab coaster
        dexarmPicker.move_to(fuzzyX, fuzzyY_hover, fuzzyZ, mode="G1", feedrate=speedRobot) #Move backwards prior to going up, to clear jig
        dexarmPicker.move_to(fuzzyX, fuzzyY_hover, 0, mode="G0", feedrate=speedRobot) #Move upwards- at a diagonal to clear the screw. 
        #Since we're probably unloading after this, the currently-diagonal position should be fine. Can always add another move at the end of this sequence, though. 
        

        # Sensor check to confirm pickup
        if not pickStatus():
            stopWorkcell(dexarmPicker)
            raise RuntimeError("Final pick at adhesive station failed! Did the coaster get stuck?")
        #If nothing goes wrong, print as such to console. 
        print("Adhesive operation completed successfully. (As far as picking goes)")



if __name__ == '__main__':
    # Example execution
    dexarmPicker = Dexarm(port="COM19")
    dexarmAdhesive = Dexarm(port="COM4")
    pick_indices = [(1, 1), (2, 1), (3, 1)]
    applyFuzzyFeet(dexarmPicker, dexarmAdhesive, pick_indices)


