#Code generated by ChatGPT 4.0 on 4.29.24
#Modified by Alexander Torres on 4.29.24 to fix syntax errors and improve readability 

"""
This module (PickerLoadingModule.py) provides functionalities for automatically 
picking coasters using the Dexarm robot arm. It includes routines to handle precise 
movement control based on sensor feedback, initialization of the robotic arm's sliding rail, 
and operational sequences necessary for safe and accurate coaster picking.

Functions:
- initialize_picker_arm(dexarm): Prepares the sliding rail and sets up the robot arm.
- grabCoaster(dexarm): Executes the sequence to pick a coaster based on sensor measurements.
- close_module(dexarm): Safely closes connections and cleans up resources.

Usage:
from PickerLoadingModule import grabCoaster, initialize_picker_arm #import

#...other initialization code 

initialize_picker_arm(dexarm) #Make sure the sliding rail and picker are homed. Put this at the start of a given sequence. 
grabCoaster(dexarm) #Abstracted function to pick a coaster. Takes a dexarm object as input. 

#...other cool code

Also, close_sensor is probably redundant and isn't called in the main code. It's here if something arises that needs it, though- in theory intialization handles the COM ports. 
- Alexander T. 


"""


#This module abstacts the loading process of the dexARMs. 
#Important constants: 
#loading_X, Y, and hover_Z - Controls where the picker arm thinks the middle of the coaster is
#loading_clearance_X       - How far back the arm should move to reduce the odds of collission with the loader. Beware of XY limits- changing this to be too large will throw a silent error. 

from TOFSensorModule import get_sensor_height, close_sensor
from PickVerificationModule import pickStatus #For fault detection. 
from ErrorHandlingModule import stopWorkcell
import time 


# Constants
RAIL_SOUTH_POS = 880
loading_X = 320 #changed from 316 to 320
loading_Y = 57 #changed from 54 to 57
loading_hover_Z = 120
speedRobot = 6000
slow_feedrate = 1000  # Slower feedrate for the final precise movement
loading_clearance_X = 100

def initialize_picker_arm(dexarm):
    """ 
    Initializes the sliding rail (home pos.) connected to the picker arm and the pickr arm itself (home pos). 
    """
    # Initialize the sliding rail if connected
    dexarm.sliding_rail_init()
    robotConnectedRail = True
    print("Sliding rail initialized and connected.")
    dexarm.go_home() #Fixes some XY constraint errors... I think. NOTE: This is another thing which can *probably* be removed at a later date, but I don't want to accidentally break anything with only a week left. -Alex
    #...though this may cause colissions. Oh well. 

def grabCoaster(dexarm):
    #Pardon the weird indentation. Changed htis from a try to just throw a runtime exception using checkSensor. 
        # Move to a clearance position before going directly above the coaster
        dexarm.move_to(loading_X - loading_clearance_X, loading_Y, loading_hover_Z, RAIL_SOUTH_POS, mode="G0", feedrate=speedRobot)

        # Move to the hover position above the coaster stack
        dexarm.move_to(loading_X, loading_Y, loading_hover_Z, RAIL_SOUTH_POS, mode="G1", feedrate=speedRobot)

        # Take a sensor reading
        height = get_sensor_height()
        print(f"Sensor height measurement: {height} mm")

        # Move quickly to 10 mm above the target Z
        target_Z_quick = loading_hover_Z - height + 10
        dexarm.move_to(loading_X, loading_Y, target_Z_quick, RAIL_SOUTH_POS, mode="G1", feedrate=speedRobot)

        # Move slowly for the last 10 mm
        target_Z_slow = loading_hover_Z - height
        dexarm.move_to(loading_X, loading_Y, target_Z_slow, RAIL_SOUTH_POS, mode="G1", feedrate=slow_feedrate)

        # Initialize the vacuum picker
        dexarm.air_picker_pick()

        # Lift back up at normal speed
        dexarm.move_to(loading_X, loading_Y, target_Z_slow+20, RAIL_SOUTH_POS, mode="G1", feedrate=speedRobot) #Lift straight up first otherwise the non-edge-filleted coasters stick together. 

        # Lift back up at normal speed
        dexarm.move_to(loading_X - loading_clearance_X, loading_Y, loading_hover_Z, RAIL_SOUTH_POS, mode="G1", feedrate=speedRobot)

        if not pickStatus():
        #This throws a runtime error if the sensor check fails. For more robust error handling, change this back to a "print" and instead return false. 
           stopWorkcell(dexarm)
           raise RuntimeError("Pick at loading area failed! Are we out of coasters? Stopping execution.")
        #return false #This will be more useful for more robust error handling. For now, the code just stops. 

def close_module(dexarm):
    dexarm.close()
    print("Dexarm connection closed.")


