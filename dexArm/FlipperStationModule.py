# Generated by ChatGPT 4.0 on April 29, 2024.
# Modified by Alexander Torres on 4.29.24 to fix syntax errors and improve readability.
# Additional comments by Alexander Torres and ChatGPT 4.0.

"""
This module handles the process of flipping coasters using a robotic arm equipped with a vacuum picker and an Arduino-controlled flipper station. It is designed to move coasters to specific positions for flipping and to retrieve them after the flip.

Function:
- flipCoaster(dexarm): Moves the coaster to the flip station, drops it, flips it using an Arduino-controlled mechanism, picks it back up, and returns the coaster to a safe position.
"""

from pydexarm import Dexarm
from PickVerificationModule import pickStatus
from ErrorHandlingModule import stopWorkcell
import pressure_flipper_serial as p_f #Fixed declration 
import time


#This module is a bit more complex. Let's print robot positions for debugging. 
def robotPrintLocation(dexarm): #copy pasted for debugging 
    dexarm._send_cmd("G92.1\r")
    x, y, z, e, _, _, _ = dexarm.get_current_position()
    print(x, y, z, e, "mm")


# Constants for movement
idle_X = 0
idle_Y = 200
idle_Z = 0
RAIL_NORTH_POS = 0
dropoff_X = -61
dropoff_Y = 342
dropoff_Z = -65
pickup_X = 50
pickup_Y = 347
pickup_Z = -93
speedRobot = 6000  # feedrate for robot movements

def flipCoaster(dexarm):
    """
    Executes the coaster flipping process.
    
    Parameters:
    - dexarm: Instance of Dexarm controlling the robotic arm.
    """

    dexarm.go_home() #Go home, to try and fix the error these three lines are throwing. 

    # Move to a safe idle position
    dexarm.move_to(idle_X, idle_Y, idle_Z, RAIL_NORTH_POS, mode="G0", feedrate=speedRobot)

    # Move to slightly above dropoff position
    dexarm.move_to(dropoff_X, dropoff_Y, dropoff_Z+20, mode="G0", feedrate=speedRobot)
    # Move to the dropoff position itself
    dexarm.move_to(dropoff_X, dropoff_Y, dropoff_Z, mode="G1", feedrate=speedRobot)
    
    dexarm.air_picker_stop()  # Release coaster at the flip station
    
    # Return to idle to initiate flipping
    dexarm.move_to(idle_X, idle_Y, idle_Z, mode="G0", feedrate=speedRobot)
    time.sleep(3) #Wait 3 seconds to let arm clear. Not sure why this broke but it did. 

    # Activate the flipper via Arduino
    p_f.FlipperStationGo()

    # Move to SLIGHTLY ABOVE pickup position and retrieve the flipped coaster
    dexarm.move_to(pickup_X, pickup_Y, pickup_Z+20, mode="G0", feedrate=speedRobot)
    #Move to the actual pikcup position 
    dexarm.move_to(pickup_X, pickup_Y, pickup_Z, mode="G1", feedrate=speedRobot)
    dexarm.air_picker_pick()  # Engage picker to grab the coaster

    # Raise the coaster to clear the flipper table
    dexarm.move_to(pickup_X, pickup_Y, pickup_Z + 40,mode="G0", feedrate=speedRobot)

    if not pickStatus():
        #This throws a runtime error if the sensor check fails. For more robust error handling, change this back to a "print" and instead return false. 
        stopWorkcell(dexarm) 
        raise RuntimeError("Pick at picker station failed! Did the coaster end up somewhere unexpected? Stopping execution.")
        #return false #This will be more useful for more robust error handling. For now, the code just stops. 

    # Move back to the idle position to complete the cycle
    dexarm.move_to(idle_X, idle_Y, idle_Z, RAIL_NORTH_POS, mode="G0", feedrate=speedRobot)

# Optional testing block
if __name__ == "__main__":
    p_f.initializePressureFlipperArduino()
    dexarm = Dexarm(port='COM19')
    flipCoaster(dexarm)



